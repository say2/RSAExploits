
from sympy import integer_nthroot
from fractions import gcd

# Computes an RSA private key given a public exponent
# e and a list of the primes factors of the modulus
def compute_private_RSA_exp(e, prime_factors_list):
	totient = totient_from_primes(prime_factors_list)
	d = long(modInv(e, totient))
	return d

# Computes the euler's phi function of the number that is the
# product of the provided list of primes
def totient_from_primes(prime_factors_list):
	totient = 1
	for factor in prime_factors_list:
		totient = totient * (factor - 1)
	return totient

# Returns True if n1 and n2 are coprime and False otherwise
def coprime(n1, n2):
    return gcd(n1, n2) == 1

# Returns True if the provided value s can be decoded using
# the specified codec
def isprintable(s, codec='utf8'):
	try: s.decode(codec)
	except UnicodeDecodeError: 
		return False
	else: 
		return True

def int_nthroot(n, r): # returns (rounded root, whether root is int) 
	(root, exact) = integer_nthroot(n,r)
	if exact:
		return root
	else:
		return None

def CRT(ds, rs):
    '''
    Chinese Remainder Theorem
    ds: array of dividers
    rs: array of remainders
    Return the number s such that s mod ds[i] = rs[i]
    '''
    length = len(ds)
    if not length == len(rs):
        print "The lengths of the two must be the same"
        return None

    p = i = prod = 1 
    s = 0
    for i in range(length): 
        prod *= ds[i]
    for i in range(length):
        p = prod // ds[i]
        s += rs[i] * modInv(p, ds[i]) * p
    return s % prod


def modInv(a, m):
    '''
    Return r such that a*r mod m = 1
    '''
    g, x, y = eGCD(a, m)
    if g != 1:
        print("no inverse")
        return None
    else:
        return x % m


def eGCD(a, b):
    '''
    Extended Euclidean gcd. Return g,x,y such that ax+by=g=gcd(a,b)
    '''
    if a == 0: 
        return (b, 0, 1)
    else:
        g, y, x = eGCD(b%a, a)
        return (g, x-(b//a)*y, y)
