sage_present = True
try:
	from sage.all_cmdline import *
except ImportError:
	sage_present = False
from RSAExploits.factoring_common import long_cal
from RSAExploits.util import compute_private_RSA_exp
from Exploit import Exploit

class _qsieve(Exploit):
	def run(self, rsadata_list):

		global sage_present
		
		if not sage_present:
			print "Qsieve Factoring: Sage required, skipping exploit"
			return 

		print ("Qsieve Factoring: Running Attack...")
		success = False

		for rsadata in rsadata_list:
			roots = long_cal(300, rsadata.getN(), qsieve)
			if roots != None:
				print roots[0]
				rsadata.setD(compute_private_RSA_exp(rsadata.getE(), roots[0]))
				success = True
	
		if success:		
			print("Qsieve Factoring: Success, roots found, assigned in rsadata.")
			return True							
		else: 			
			print("Qsieve Factoring: Failure, roots not found.")
			return False
