from sage.all_cmdline import *   # import sage library
import itertools
from Exploit import Exploit




'''
n = int('00a35fe41555b06b23cd769a2aad77cad3a3daa6a76de7591c8b8f281afa5125297fb10541387f8b998d2fd1a76120dd147281ac5208ea52d3ecad1e3e7cab5c0db247ddf87cd8adc3ad13bfb571e26d2e17ffa2429a80b7e9dbdf4054845fd2242ae071fe1a195d28900eda405da3e937ca29dff284e0528c3db510dea9c733bf', 16)
s1 = int('Alex'.encode('hex'), 16)
s2 = int('Jane'.encode('hex'), 16)
c1 = int('61be5676e0f8311dce5d991e841d180c95b9fc15576f2ada0bc619cfb991cddfc51c4dcc5ecd150d7176c835449b5ad085abec38898be02d2749485b68378a8742544ebb8d6dc45b58fb9bac4950426e3383fa31a933718447decc5545a7105dcdd381e82db6acb72f4e335e244242a8e0fbbb940edde3b9e1c329880803931c', 16)
c2 = int('9d3c9fad495938176c7c4546e9ec0d4277344ac118dc21ba4205a3451e1a7e36ad3f8c2a566b940275cb630c66d95b1f97614c3b55af8609495fc7b2d732fb58a0efdf0756dc917d5eeefc7ca5b4806158ab87f4f447139d1daf4845e18c8c7120392817314fec0f0c1f248eb31af153107bd9823797153e35cb7044b99f26b0', 16)
e = 0x3001
'''

class coppersmith(Exploit):
	roots = []
	rsadataset = []
	found = None
	n1 = None; e1 = None;  c1 = None; m1 = None; pt1 = None;
	n2 = None; e2 = None;  c2 = None; m2 = None; pt2 = None;
	def run(self, rsadata, partial):
		print ("Coppersmith: Running Attack...")
		if type (rsadata) is not list:
			print ("Coppersmith: List of RSA data required.")
		else:
			self.rsadataset = list(rsadata)

		for rdata in itertools.combinations(self.rsadataset, 2):
			self.n1 = rdata[0].getN()
			self.e1 = rdata[0].getE()
			self.n2 = rdata[1].getN()
			self.e2 = rdata[1].getE()
			self.c1 = rdata[0].getC()
			self.c2 = rdata[1].getC()
			self.pt1 = partial[self.rsadataset.index(rdata[0])]
			self.pt2 = partial[self.rsadataset.index(rdata[1])]
			
			if self.n1 == self.n2 and self.e1 == self.e2: 	
				self.m2 = self.execute(self.n1,self.e1,self.c1,self.c2,self.pt1,self.pt2)
			else:
				continue
				
			if self.m2 != None:
				self.found = 1
				rdata[1].setM(self.m2)
			
		if self.found != None:		
			print("Coppersmith: Success, message found, assigned in rsadata.")
			return True							
		else: 			
			print("Coppersmith: Failure, message not found.")
			return False

	@staticmethod
	def execute(n,e,c1,c2,s1,s2):
		x = PolynomialRing(ZZ.quo(n*ZZ), 'x').gen()
		f=(x-s2+s1)**e-c1
		g=x**e-c2
		a = f
		b = g
		i = 0

		while True:
			r = a % b
			#print i
			if r == 0:
			    #print 'FOUND %s' % rp
			    c = rp.coeffs()
			    pt = int(-pow(c[1], -1, n) * c[0])
			    print 'FLAG %s' % coppersmith.n2s(int(-pow(c[1], -1, n) * c[0]))
			    return pt
			rp = r
			a, b = b, r
			i += 1
	
	@staticmethod
	def n2s(n):
		s = hex(n)[2:-1]
		if len(s) % 2 != 0:
		    s = '0' + s
		return s.decode('hex')
