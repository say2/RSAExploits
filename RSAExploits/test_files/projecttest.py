# This script was written assuming that the RSAExploits directory
# is located in the same directory as this script

import RSAExploits.RSA_Cracker
from RSAExploits.rsa import rsaData
from RSAExploits.rsa import rsaObj
from RSAExploits.rsa import txt

# Parse and store all of the ciphertexts provided by the file
ciphertexts = []
c = None
e = None
N = None
f = open("common_moduli_test.txt", 'r')
for line in f:
    if line.startswith("ciphertext"):
        c = long(line.split(" ")[2], 0)
    elif line.startswith("e"):
        e = long(line.split(" ")[2])
    elif line.startswith("N"):
        N = long(line.split(" ")[2], 0)
        ciphertexts.append(rsaData(rsaObj(N, e), txt(c, idnum=1)))
f.close()

f = open("common_factor_test.txt", 'r')
for line in f:
    if line.startswith("ciphertext"):
        c = long(line.split(" ")[2], 0)
    elif line.startswith("e"):
        e = long(line.split(" ")[2])
    elif line.startswith("N"):
        N = long(line.split(" ")[2], 0)
        ciphertexts.append(rsaData(rsaObj(N, e), txt(c, idnum=None)))
f.close()

RSAExploits.RSA_Cracker.init()
RSAExploits.RSA_Cracker.attack(ciphertexts)
for ciphertext in ciphertexts:
    if ciphertext.getM() != None and ciphertext.getM() != 0x0:
        print hex(ciphertext.getM())[2:-1].decode("hex")
########################################################################


# wiener check
n = 146193785211071083147130636238573267309113129457674234075645620220900639281966619447941359162090083216650370255867895593658470402538302001075254512372679348866161651147360793302958344310231135401843589656678154545650599243773256446086952715267778390783960001603458943339635890684619398749158482824229359691723 
e = 24965233021220474149465248466108133255624126459179722388613106100125613553296950728740919803607493475903338355792856069489658212113212867136965183481596803972819691203271811840882897154481266567129665787709337411123023799891479246069439976390071915547255703298436237196034723601620344085225165352394049429139
c = 33882941859295974838561710576893958095340468883069112893691828085843360019735857821263710528680469063317997838395039663620694113519089897011666222179237043325583204753422590968103083978003132294468813529431569393709782331004191568327655630974608243979250718338748943159721986360823198034179563260610492878633
#key = RSA.generate(1024)
''' hastad check
keys = []
ct = []
msg = random.getrandbits(512)
print "msg=",msg
for i in range(17):
key = RSA.generate(1024)
keys.append(rsa.set_RSAobj(key.n,long(17)))
ct.append(pow(msg,17,keys[i].n))
print hastad.execute(keys,ct)
'''
''' fermat check
p=13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084171
q=13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084241
n=p*q
key = rsa.set_RSAobj(n,long(65537))
print fermat.execute(key)
'''
'''
#factoring method ecm & qsieve
l=12723288628898550153320083396450085603026991997045137731092795552718463646269528946189254465816938102228558110962790401641543535822072583398982840914598874411135903
factoring._ecm(l)
k = 56539106072908298546665520023773411725787075754118412976037683034866069393 #p = next_prime(2^120), q = next_prime(2^125)
factoring._qsieve(k)
'''

#key = RSA.generate(1024)
k = rsaObj(n,e)
t = txt(c)
d = rsaData(k, t)
RSAExploits.RSA_Cracker.init()
RSAExploits.RSA_Cracker.attack([d])
print d.getP()
print d.getQ()
print d.getD()
d.decrypt()
print hex(d.getM())[2:-1].decode('hex')
