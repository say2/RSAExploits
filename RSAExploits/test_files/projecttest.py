# This script was written assuming that the RSAExploits directory
# is located in the same directory as this script

import RSAExploits.RSA_Cracker
from RSAExploits.RSA_Data import RSA_Data
from RSAExploits.exploits.fermat import fermat
from RSAExploits.exploits.ecm import _ecm
from RSAExploits.exploits.qsieve import _qsieve
from RSAExploits.exploits.franklin_reiter import franklin_reiter_wrapper
from Crypto.PublicKey import RSA
import random

# Parse and store all of the ciphertexts provided by the file
'''
ciphertexts = []
c = None
e = None
N = None
f = open("common_moduli_test.txt", 'r')
for line in f:
	if line.startswith("ciphertext"):
		c = long(line.split(" ")[2], 0)
	elif line.startswith("e"):
		e = long(line.split(" ")[2])
	elif line.startswith("N"):
		N = long(line.split(" ")[2], 0)
		ciphertexts.append(RSA_Data((N, e), (c, 1)))
f.close()

f = open("common_factor_test.txt", 'r')
for line in f:
	if line.startswith("ciphertext"):
		c = long(line.split(" ")[2], 0)
	elif line.startswith("e"):
		e = long(line.split(" ")[2])
	elif line.startswith("N"):
		N = long(line.split(" ")[2], 0)
		ciphertexts.append(RSA_Data((N, e), (c, None)))
f.close()

RSAExploits.RSA_Cracker.init()
RSAExploits.RSA_Cracker.attack(ciphertexts)
for ciphertext in ciphertexts:
	ciphertext.decrypt()
	if ciphertext.get_m() != None and ciphertext.get_m() != 0x0:
		print hex(ciphertext.get_m())[2:-1].decode("hex")

########################################################################


# wiener check
n = 146193785211071083147130636238573267309113129457674234075645620220900639281966619447941359162090083216650370255867895593658470402538302001075254512372679348866161651147360793302958344310231135401843589656678154545650599243773256446086952715267778390783960001603458943339635890684619398749158482824229359691723 
e = 24965233021220474149465248466108133255624126459179722388613106100125613553296950728740919803607493475903338355792856069489658212113212867136965183481596803972819691203271811840882897154481266567129665787709337411123023799891479246069439976390071915547255703298436237196034723601620344085225165352394049429139
c = 33882941859295974838561710576893958095340468883069112893691828085843360019735857821263710528680469063317997838395039663620694113519089897011666222179237043325583204753422590968103083978003132294468813529431569393709782331004191568327655630974608243979250718338748943159721986360823198034179563260610492878633
d = RSA_Data((n, e), (c, None))
RSAExploits.RSA_Cracker.init()
RSAExploits.RSA_Cracker.attack([d])
d.decrypt()
print hex(d.get_m())[2:-1].decode('hex')
'''
'''
try:
	from sage.all_cmdline import *
except ImportError:
	sage_present = False
n = long('00a35fe41555b06b23cd769a2aad77cad3a3daa6a76de7591c8b8f281afa5125297fb10541387f8b998d2fd1a76120dd147281ac5208ea52d3ecad1e3e7cab5c0db247ddf87cd8adc3ad13bfb571e26d2e17ffa2429a80b7e9dbdf4054845fd2242ae071fe1a195d28900eda405da3e937ca29dff284e0528c3db510dea9c733bf', 16)
s1 = int('Alex'.encode('hex'), 16)
s2 = int('Jane'.encode('hex'), 16)
c1 = long('61be5676e0f8311dce5d991e841d180c95b9fc15576f2ada0bc619cfb991cddfc51c4dcc5ecd150d7176c835449b5ad085abec38898be02d2749485b68378a8742544ebb8d6dc45b58fb9bac4950426e3383fa31a933718447decc5545a7105dcdd381e82db6acb72f4e335e244242a8e0fbbb940edde3b9e1c329880803931c', 16)
c2 = long('9d3c9fad495938176c7c4546e9ec0d4277344ac118dc21ba4205a3451e1a7e36ad3f8c2a566b940275cb630c66d95b1f97614c3b55af8609495fc7b2d732fb58a0efdf0756dc917d5eeefc7ca5b4806158ab87f4f447139d1daf4845e18c8c7120392817314fec0f0c1f248eb31af153107bd9823797153e35cb7044b99f26b0', 16)
e = long(0x3001)


rsadata1 = RSA_Data((n, e), (c1, None))
rsadata2 = RSA_Data((n, e), (c2, None))

x = PolynomialRing(ZZ.quo(n*ZZ), 'x').gen()
poly = x - s2 + s1
msg = franklin_reiter_wrapper(rsadata1, rsadata2, poly)
print hex(msg)[2:-1].decode("hex")
'''


'''	
#key = RSA.generate(1024)
# hastad check
msg = random.getrandbits(512)
print "msg=",msg
mylist = []
for i in range(17):
	key = RSA.generate(1024)
	c = pow(msg, 17, key.n)
	mylist.append(RSA_Data((key.n, long(17)), (c, 1)))

RSAExploits.RSA_Cracker.init()
RSAExploits.RSA_Cracker.attack(mylist)
print mylist[0].get_m()
'''
'''
# fermat check
p=13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084171
q=13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084241
n=p*q
obj = RSA_Data((long(n), long(65537)), (0, None))
RSAExploits.RSA_Cracker.init()
RSAExploits.RSA_Cracker.attack([obj])
print obj.get_p()
print obj.get_q()
#key = rsa.set_RSAobj(n,long(65537))
'''
'''
k = 56539106072908298546665520023773411725787075754118412976037683034866069393 #p = next_prime(2^120), q = next_prime(2^125)
obj = RSA_Data((k, long(17)), (0, None))
RSAExploits.RSA_Cracker.init()
RSAExploits.RSA_Cracker.attack([obj])
print obj.get_p()
print obj.get_q()
#factoring._qsieve(k)
#factoring method ecm & qsieve
'''

l=12723288628898550153320083396450085603026991997045137731092795552718463646269528946189254465816938102228558110962790401641543535822072583398982840914598874411135903
obj = RSA_Data((l, long(17)), (0, None))

RSAExploits.RSA_Cracker.init()
RSAExploits.RSA_Cracker.attack([obj])
print obj.get_p()
print obj.get_q()


