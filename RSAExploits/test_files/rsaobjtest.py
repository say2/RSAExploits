
import binascii
from RSAExploits.exploits.wiener import wiener
from RSAExploits.exploits.hastad import hastad
from RSAExploits.exploits.fermat import fermat
from RSAExploits import rsa
import random
from Crypto.PublicKey import RSA

'''
k = RSA.generate(1024)
main.execute("coppersmith",k)
'''


'''
#key test
key = RSA.generate(1024)

k = rsa.rsaObj(key.n,key.e,key.d,key.p)
s = "abcd"
i = int(s.encode("hex"),16)

td = rsa.txt(None,i)
d = rsa.rsaData(k,td)
c = d.encrypt()
print c
p = d.decrypt()
 
print p
print binascii.unhexlify(hex(p)[2:-1])
print d.txt.c
print d.txt.m
 
print k.p
print key.n == k.p*k.q
'''

'''
# wiener check
n = 146193785211071083147130636238573267309113129457674234075645620220900639281966619447941359162090083216650370255867895593658470402538302001075254512372679348866161651147360793302958344310231135401843589656678154545650599243773256446086952715267778390783960001603458943339635890684619398749158482824229359691723 
e = 24965233021220474149465248466108133255624126459179722388613106100125613553296950728740919803607493475903338355792856069489658212113212867136965183481596803972819691203271811840882897154481266567129665787709337411123023799891479246069439976390071915547255703298436237196034723601620344085225165352394049429139
c = 33882941859295974838561710576893958095340468883069112893691828085843360019735857821263710528680469063317997838395039663620694113519089897011666222179237043325583204753422590968103083978003132294468813529431569393709782331004191568327655630974608243979250718338748943159721986360823198034179563260610492878633

#key = RSA.generate(1024)
k = rsa.rsaObj(n,e)
d = []
t = rsa.txt(c)
d.append(rsa.rsaData(k,t))
wiener().run(d)
print d[0].rsaobj.d
p = d[0].txt.m
print binascii.unhexlify(hex(p)[2:-1])
'''
'''
#hastad check
dset = []
msg = random.getrandbits(512)
print "msg=",msg
for i in range(17):
	key = RSA.generate(1024)
	k = rsa.rsaObj(key.n,long(17))
	ct = pow(msg,17,k.n)
	c = rsa.txt(ct)
	d = rsa.rsaData(k,c)
	dset.append(d)

hastad().run(dset)
'''

'''
#fermat check
dset=[]
p=13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084171
q=13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084241
n=p*q
msg = int("fermat".encode("hex"), 16)
key = rsa.rsaObj(n,long(65537))
ct = pow(msg, 65537, key.n)
c = rsa.txt(ct)
d = rsa.rsaData(key,c)
dset.append(d)
print fermat().run(dset)
print dset[0].txt.m
p = dset[0].txt.m
print binascii.unhexlify(hex(p)[2:-1])
'''

'''
#factoring method ecm & qsieve
l=12723288628898550153320083396450085603026991997045137731092795552718463646269528946189254465816938102228558110962790401641543535822072583398982840914598874411135903
factoring._ecm(l)
k = 56539106072908298546665520023773411725787075754118412976037683034866069393 #p = next_prime(2^120), q = next_prime(2^125)
factoring._qsieve(k)
'''
